/*
 * This file is generated by jOOQ.
 */
package io.github.giger85.example.tables;


import io.github.giger85.example.BarInfo;
import io.github.giger85.example.Keys;
import io.github.giger85.example.Public;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.jackson.extensions.converters.JSONBtoJacksonConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bar extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bar</code>
     */
    public static final Bar BAR = new Bar();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.bar.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.bar.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.bar.json_array_data</code>.
     */
    public final TableField<Record, BarInfo[]> JSON_ARRAY_DATA = createField(DSL.name("json_array_data"), SQLDataType.JSONB, this, "", new JSONBtoJacksonConverter<BarInfo[]>((Class<BarInfo[]>) (Class) BarInfo.class));

    /**
     * The column <code>public.bar.created_at</code>.
     */
    public final TableField<Record, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Bar(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Bar(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bar</code> table reference
     */
    public Bar(String alias) {
        this(DSL.name(alias), BAR);
    }

    /**
     * Create an aliased <code>public.bar</code> table reference
     */
    public Bar(Name alias) {
        this(alias, BAR);
    }

    /**
     * Create a <code>public.bar</code> table reference
     */
    public Bar() {
        this(DSL.name("bar"), null);
    }

    public <O extends Record> Bar(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, BAR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.BAR_PKEY;
    }

    @Override
    public Bar as(String alias) {
        return new Bar(DSL.name(alias), this);
    }

    @Override
    public Bar as(Name alias) {
        return new Bar(alias, this);
    }

    @Override
    public Bar as(Table<?> alias) {
        return new Bar(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bar rename(String name) {
        return new Bar(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bar rename(Name name) {
        return new Bar(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bar rename(Table<?> name) {
        return new Bar(name.getQualifiedName(), null);
    }
}
