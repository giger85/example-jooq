/*
 * This file is generated by jOOQ.
 */
package io.github.giger85.example.tables;


import io.github.giger85.example.Keys;
import io.github.giger85.example.Public;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Foo extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.foo</code>
     */
    public static final Foo FOO = new Foo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.foo.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.foo.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.foo.created_at</code>.
     */
    public final TableField<Record, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Foo(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Foo(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.foo</code> table reference
     */
    public Foo(String alias) {
        this(DSL.name(alias), FOO);
    }

    /**
     * Create an aliased <code>public.foo</code> table reference
     */
    public Foo(Name alias) {
        this(alias, FOO);
    }

    /**
     * Create a <code>public.foo</code> table reference
     */
    public Foo() {
        this(DSL.name("foo"), null);
    }

    public <O extends Record> Foo(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, FOO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.FOO_PKEY;
    }

    @Override
    public Foo as(String alias) {
        return new Foo(DSL.name(alias), this);
    }

    @Override
    public Foo as(Name alias) {
        return new Foo(alias, this);
    }

    @Override
    public Foo as(Table<?> alias) {
        return new Foo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Foo rename(String name) {
        return new Foo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Foo rename(Name name) {
        return new Foo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Foo rename(Table<?> name) {
        return new Foo(name.getQualifiedName(), null);
    }
}
